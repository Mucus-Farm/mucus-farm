// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";

// to verfiy that we recevied Dai
interface Dai {
    function balanceOf(address) external view returns (uint256);
}

contract ContractTest is Test {
    Dai dai = Dai(0x6B175474E89094C44Da98b954EedeAC495271d0F);

    // your address
    address constant myAddress = 0x52D45297a12e992BD9A94E3E688247EC3eB83120;

    // contract address from MetaMask
    address constant swapDai = 0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B;

    function testSwap() public {
        // to verify if we are actually forking
        emit log_named_uint("Current ether balance of myAddress", myAddress.balance);

        emit log_named_uint("Dai balance of myAddress before", dai.balanceOf(myAddress));

        // type casting hex call data to bytes
        bytes memory data =
            hex"3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000064782f7700000000000000000000000000000000000000000000000000000000000000020b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000001015a0495daf96d8900000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc20001f46b175474e89094c44da98b954eedeac495271d0f000000000000000000000000000000000000000000";

        // setting the next call's msg.sender as myAddress
        vm.prank(myAddress);

        (bool sent,) = payable(swapDai).call{value: 0.01 ether}(data);
        require(sent, "failed");

        emit log_named_uint("Dai balance of myAddress after", dai.balanceOf(myAddress));
    }
}
